[Unit]
Description=Blade Client
Documentation=https://github.com/Ethernal-Tech/blade
After=docker.service
Requires=docker.service

# Bring this up after the network is online
After=network-online.target
Wants=network-online.target

[Service]
TimeoutStartSec=0
Restart=always
ExecStartPre=-/usr/bin/docker stop %n
ExecStartPre=-/usr/bin/docker rm %n
ExecStartPre=/usr/bin/docker pull ${ docker_image }
ExecStart=/usr/bin/docker run --rm --log-driver=awslogs --log-opt awslogs-group=docker-logs --name %n -u 1001:1001 --net host -w /blade -v /etc/blade:/etc/blade -v ${blade_home_dir}:/blade:z ${ docker_image } server --data-dir /blade \
    --chain /blade/bootstrap/genesis.json \
    --grpc-address 0.0.0.0:${ blade_grpc_port } \
    --json-rpc-batch-request-limit 999 \
    --libp2p 0.0.0.0:${ blade_p2p_port } \
    --jsonrpc 0.0.0.0:${ blade_jsonrpc_port } \
    --prometheus 0.0.0.0:${ blade_prometheus_port } \
    --max-slots ${ max_slots } \
    --max-enqueued ${ max_enqueued }\
    --log-level INFO \
    --block-gas-target ${ block_gas_limit } \
    --num-block-confirmations 2 \
    --secrets-config /blade/bootstrap/secrets/${hostname}_config.json \
    %{ if is_bootstraper }
    --relayer \
    %{ endif }

MemoryHigh=${ memory_high}
MemoryMax=${ memory_max }
MemorySwapMax=0

Restart=on-failure
RestartSec=5s

Type=simple

User=${ blade_user }
Group=${ blade_user }-group

TimeoutStartSec=infinity
TimeoutStopSec=600

RuntimeDirectory=blade
RuntimeDirectoryMode=0700

ConfigurationDirectory=blade
ConfigurationDirectoryMode=0700

StateDirectory=blade
StateDirectoryMode=0750

# Hardening measures
# https://www.linuxjournal.com/content/systemd-service-strengthening
# sudo systemd-analyze security
# systemd-analyze syscall-filter
####################

# Provide a private /tmp and /var/tmp.
PrivateTmp=true

# Mount /usr, /boot/ and /etc read-only for the process.
ProtectSystem=full

# Deny access to /home, /root and /run/user
ProtectHome=true

# Disallow the process and all of its children to gain
# new privileges through execve().
NoNewPrivileges=true

# Use a new /dev namespace only populated with API pseudo devices
# such as /dev/null, /dev/zero and /dev/random.
PrivateDevices=true

# Deny the creation of writable and executable memory mappings.
MemoryDenyWriteExecute=true

# Deny any ability to create namespaces. Should not be needed
RestrictNamespaces=true

# Restrict any kind of special capabilities
CapabilityBoundingSet=

# Allow minimal system calls for IO (filesystem network) and basic systemctl operations
SystemCallFilter=@signal @network-io @ipc @file-system @chown @system-service

# Access to  /sys/fs/cgroup/ should not be needed
ProtectControlGroups=true

# We don't need access to special file systems or extra kernel modules to work
ProtectKernelModules=true

# Access to proc/sys/, /sys/, /proc/sysrq-trigger, /proc/latency_stats, /proc/acpi, /proc/timer_stats, /proc/fs and /proc/irq is not needed
ProtectKernelTunables=true

# From the docsk "As the SUID/SGID bits are mechanisms to elevate privileges, and allow users to acquire the identity of other users, it is recommended to restrict creation of SUID/SGID files to the few programs that actually require them"
RestrictSUIDSGID=true

[Install]
WantedBy=multi-user.target

